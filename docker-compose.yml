# AI Assistance Disclosure:
# Tool: ChatGPT (GPT 5.0), date: 2025-09-19
# Purpose: To understand how to add password to redis container
# Author Review: I validated security and performance of the setup.
#
# Tool: GitHub Copilot (model: Claude Sonnet 4), date: 2025-10-13
# Purpose: To implement live reload development setup with hybrid architecture
# Author Review: I validated Docker networking, nodemon configuration, and Windows/WSL2 compatibility.

# =============================================================================
# PEERPREP DOCKER COMPOSE - HYBRID DEVELOPMENT SETUP
# =============================================================================
#
# üî• LIVE RELOAD ENABLED FOR MICROSERVICES ONLY
# 
# ARCHITECTURE:
# ‚îú‚îÄ‚îÄ üåê Frontend (Next.js) - Runs via NPM DEV (host machine)
# ‚îú‚îÄ‚îÄ üöÄ Microservices - Run via DOCKER with live reload
# ‚îú‚îÄ‚îÄ üîß API Gateway (Nginx) - Docker (no live reload needed)
# ‚îî‚îÄ‚îÄ üíæ Databases - Docker
#
# WHY HYBRID APPROACH:
# ‚úÖ Frontend: Best HMR performance outside Docker
# ‚úÖ Microservices: Consistent environment with live reload
# ‚úÖ Databases: Isolated and persistent in Docker
#
# üîÑ LIVE RELOAD FEATURES:
# üì¶ MICROSERVICES:
#   ‚úÖ Nodemon automatic restart on file changes
#   ‚úÖ Source code mounted as volumes for instant updates
#   ‚úÖ Development mode with detailed error messages
#   ‚úÖ Direct port access for debugging (4000, 3002, 4001)
#
# üì± FRONTEND (via npm dev):
#   ‚úÖ Next.js Hot Module Replacement
#   ‚úÖ Fast Refresh for React components
#   ‚úÖ Optimized file watching on host machine
#
# üö´ NO LIVE RELOAD:
#   - API Gateway (Nginx) - Static config, rarely changes
#   - Databases - No source code to reload
#
# DEVELOPMENT WORKFLOW:
# 1. Run: npm run dev
#    ‚îî‚îÄ‚îÄ Starts Docker microservices + Frontend npm dev concurrently
# 2. Edit microservice code ‚Üí Auto-restart in Docker
# 3. Edit frontend code ‚Üí Hot reload via Next.js
# 4. All services communicate via API Gateway on localhost
#
# COMMANDS:
# - npm run dev              ‚Üí Full development stack
# - npm run dev:microservices ‚Üí Only Docker services
# - npm run dev:frontend     ‚Üí Only Next.js frontend
# - npm run dev:with-db      ‚Üí Include local database
#
# =============================================================================

# PeerPrep Docker Compose Configuration
services:
  # API Gateway - Routes all external traffic (NO LIVE RELOAD - Production nginx)
  api-gateway:
    image: honeydews/api-gateway:latest
    pull_policy: never
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "80:80" # Map host port 80 to container port (matches PORT=80 env var)
      - "443:443" # HTTPS traffic (if configured)
    depends_on:
      - user-service
      - matching-service
      - collab-service
    environment:
      - FRONTEND_URL=http://host.docker.internal:3000 # Frontend runs on host via npm dev
      - USER_SERVICE_URL=http://user-service:4000
      - MATCHING_SERVICE_URL=http://matching-service:3002
      - COLLAB_SERVICE_URL=http://collab-service:8000
      - FRONTEND_BASE_URL=http://localhost:3000
      - PORT=80 # Override Dockerfile default for local development

    # Frontend Next.js Application
  # Scalable service with port range mapping
  frontend:
    image: honeydews/frontend
    pull_policy: never
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner # Production build target
    ports:
      - "3000:3000" # Expose frontend on localhost:3000
    environment:
      - API_GATEWAY_BASE_URL=http://localhost
      - FRONTEND_BASE_URL=http://localhost:3000
      - USER_SERVICE_URL=http://user-service:4000 
      - NODE_ENV=production # Set Node.js to production mode

  # User Service - DEVELOPMENT MODE WITH LIVE RELOAD
  user-service:
    image: foochao/user-service
    pull_policy: never
    build:
      context: ./user-service
      dockerfile: Dockerfile
      target: base # Use base target and install deps manually
    ports:
      - "4000:4000" # Expose for direct access during development
    volumes:
      # Mount source code for live reload - container will restart on file changes
      - ./user-service:/app:cached
      # Exclude node_modules to prevent conflicts
      - /app/node_modules
    working_dir: /app
    env_file:
      - ./user-service/.env # Environment variables for user-service
    environment:
      - DB_LOCAL_URI=mongodb://root:example@mongodb-user-services:27017 # Override for container
      - API_GATEWAY_BASE_URL=http://localhost
      - FRONTEND_BASE_URL=http://localhost:3000
      - NODE_ENV=development # Development mode for better error messages
    command: ["/bin/sh", "-c", "npm install && npx nodemon --legacy-watch --polling-interval 1000 server.js"] # Install deps and run with polling for Windows/WSL2

  # Matching Service - DEVELOPMENT MODE WITH LIVE RELOAD
  matching-service:
    image: yc17003/matching-service
    pull_policy: never
    build:
      context: ./matching-service
      dockerfile: Dockerfile
      target: base # Use base target and install deps manually
    ports:
      - "3002:3002" # Expose for direct access during development
    volumes:
      # Mount source code for live reload
      - ./matching-service:/app:cached
      # Exclude node_modules to prevent conflicts
      - /app/node_modules
    working_dir: /app
    env_file:
      - ./matching-service/.env
    environment:
      - REDIS_HOST=redis://redis-matching-service:6379
      - NODE_ENV=development # Development mode
    command: ["/bin/sh", "-c", "npm install && npx nodemon --legacy-watch --polling-interval 1000 server.js"] # Install deps and run with polling for Windows/WSL2

  # Collaboration Service - DEVELOPMENT MODE WITH LIVE RELOAD
  collab-service:
    image: cjz/collab-service
    pull_policy: never
    build:
      context: ./collab-service
      dockerfile: Dockerfile
      # No target specified - uses default single-stage build
    ports:
      - "4001:4001" # Expose for direct access during development  
    volumes:
      # Mount source code for live reload (adjust paths based on actual structure)
      - ./collab-service:/app:cached
      # Exclude node_modules to prevent conflicts
      - /app/node_modules
    working_dir: /app
    env_file:
      - ./collab-service/.env
    environment:
      - REDIS_HOST=redis-collab-service
      - NODE_ENV=development # Development mode
    command: ["/bin/sh", "-c", "npm install && npx nodemon --legacy-watch --polling-interval 1000 server.js"] # Install deps and run with polling for Windows/WSL2

  # MongoDB Database for User Services
  mongodb-user-services:
    image: mongo:7.0.12
    container_name: peerprep-mongodb-user-services
    ports:
      - "27017:27017" # Expose MongoDB port to host
    volumes:
      - mongodb-data-user-services:/data/db # Persistent data storage
    env_file:
      - ./mongodb/.env # Database credentials
    profiles:
      - localdb # Only runs with --profile localdb

  # MongoDB Web Admin Interface
  mongo-express:
    image: mongo-express:1.0.2
    container_name: peerprep-mongo-express
    ports:
      - "8081:8081" # Expose admin interface on host port 8081
    env_file:
      - ./mongo-express/.env # Connection settings
    depends_on:
      - mongodb-user-services # Requires MongoDB to be running
    profiles:
      - localdb # Only runs with --profile localdb

  redis-collab-service:
    image: redis:latest
    container_name: collab-redis
    command:
      [
        "redis-server",
        "--requirepass",
        "${REDIS_PASSWORD}",
        "--appendonly",
        "yes",
      ]
    env_file:
      - ./collab-service/.env
    volumes:
      - redis-data-collab-service:/data

  # does not require password
  redis-matching-service:
    image: redis:latest
    container_name: matching-redis
    command: ["redis-server", "--appendonly", "yes"]
    env_file:
      - ./matching-service/.env
    volumes:
      - redis-data-matching-service:/data

# Named volumes for data persistence
volumes:
  mongodb-data-user-services:
  redis-data-collab-service:
  redis-data-matching-service:
