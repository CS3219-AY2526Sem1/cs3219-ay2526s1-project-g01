# AI Assistance Disclosure:
# Tool: ChatGPT (GPT 5.0), date: 2025-09-19
# Purpose: To understand how to add password to redis container
# Author Review: I validated security and performance of the setup.

# PeerPrep Docker Compose Configuration
# TODO: when deploying to production, switch to using images from Docker Hub -> using 'image' and 'pull_policy' and remove 'build' sections
services:
  # API Gateway - Routes all external traffic
  api-gateway:
    image: honeydews/api-gateway:latest
    pull_policy: never
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "80:80" # HTTP traffic
      - "443:443" # HTTPS traffic (if configured)
    depends_on:
      - frontend
      - user-service
      - matching-service
    environment:
      - FRONTEND_URL=http://frontend:3000
      - USER_SERVICE_URL=http://user-service:4000
      - MATCHING_SERVICE_URL=http://matching-service:3002

  # Frontend Next.js Application
  # Scalable service with port range mapping
  # container_name is omitted for scaling
  # which is important for peerprep where we do matching
  frontend:
    image: honeydews/frontend
    pull_policy: never
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner # Production build target
    # Remove external port exposure - accessed via API Gateway
    expose:
      - "3000" # Internal port only
    environment:
      - NODE_ENV=production # Set Node.js to production mode

  user-service:
    image: foochao/user-service
    pull_policy: never
    build:
      context: ./user-service
      dockerfile: Dockerfile
      # Use the runner stage from the multi-stage Dockerfile (not production)
      target: runner
    # Remove external port exposure - accessed via API Gateway
    expose:
      - "4000" # Internal port only
    env_file:
      - ./user-service/.env # Environment variables for user-service
    environment:
      - NODE_ENV=production # Set Node.js to production mode
      - DB_LOCAL_URI=mongodb://root:example@mongodb-user-services:27017 # Override for container

  matching-service:
    image: yc17003/matching-service
    pull_policy: never
    build:
      context: ./matching-service
      dockerfile: Dockerfile
    expose:
      - "3002"
    env_file:
      - ./matching-service/.env
    environment:
      - REDIS_HOST=redis://redis-matching-service:6379

  collab-service:
    image: cjz/collab-service
    pull_policy: never
    build:
      context: ./collab-service
      dockerfile: Dockerfile
    env_file:
      - ./collab-service/.env
    environment:
      - REDIS_HOST=redis-collab-service

  ### NOTE: LOCAL DATABASE SERVICES YET TO BE TESTED BY ME DO NOT USE YET ###

  # MongoDB Database for User Services
  mongodb-user-services:
    image: mongo:7.0.12
    container_name: peerprep-mongodb-user-services
    ports:
      - "27017:27017" # Expose MongoDB port to host
    volumes:
      - mongodb-data-user-services:/data/db # Persistent data storage
    env_file:
      - ./mongodb/.env # Database credentials
    profiles:
      - localdb # Only runs with --profile localdb

  # MongoDB Web Admin Interface
  mongo-express:
    image: mongo-express:1.0.2
    container_name: peerprep-mongo-express
    ports:
      - "8081:8081" # Expose admin interface on host port 8081
    env_file:
      - ./mongo-express/.env # Connection settings
    depends_on:
      - mongodb-user-services # Requires MongoDB to be running
    profiles:
      - localdb # Only runs with --profile localdb

  redis-collab-service:
    image: redis:latest
    container_name: collab-redis
    command:
      [
        "redis-server",
        "--requirepass",
        "${REDIS_PASSWORD}",
        "--appendonly",
        "yes",
      ]
    env_file:
      - ./collab-service/.env
    volumes:
      - redis-data-collab-service:/data

  ## postgres-question-service:
  ##   image: postgres:16
  ##   container_name: question-service-postgres-gateway
  ##   environment:
  ##     POSTGRES_USER: ${QUESTION_SERVICE_USER}
  ##     POSTGRES_PASSWORD: ${QUESTION_SERVICE_PASSWORD}
  ##     POSTGRES_DB: ${QUESTION_SERVICE_DB}
  ##   ports:
  ##     - "7001:5432"
  ##   env_file:
  ##     - ./.env
  ##   volumes:
  ##     - postgres-question-data:/var/lib/postgresql/data

  # postgres-db:
  #   image: postgres:16
  #   ports: 
  #     -  5432:5432
  #   environment:
  #     POSTGRES_USER: ${QUESTION_SERVICE_USER}
  #     POSTGRES_PASSWORD: ${QUESTION_SERVICE_PASSWORD}
  #     POSTGRES_DB: ${QUESTION_SERVICE_DB}
  #   volumes:
  #     - postgres-data-question-service:/var/lib/postgresql/data
  #     - ./question-service/db-init2.sql:/docker-entrypoint-initdb.d/db-init2.sql:ro
  
  pg-question-service:
    image: postgres:16
    container_name: pg-question-service ## matches DB_HOST
    ports:
      - 5432:5432 ## matches DB_PORT
    environment:
      POSTGRES_USER: ${QUESTION_SERVICE_USER} ## matches DB_USER
      POSTGRES_PASSWORD: ${QUESTION_SERVICE_PASSWORD}
      POSTGRES_DB: ${QUESTION_SERVICE_DB} ## matches DB_NAME
    volumes:
      - pg-data-question-service:/var/lib/postgresql/data
      - ./question-service/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  question-service:
    image: ignitioteo/question-service
    build:
      context: ./question-service
      dockerfile: Dockerfile
    env_file:
      - ./question-service/.env
      - ./.env
    depends_on:
      - pg-question-service
    ports:
      - "7000:7000"


  # does not require password
  redis-matching-service:
    image: redis:latest
    container_name: matching-redis
    command: ["redis-server", "--appendonly", "yes"]
    env_file:
      - ./matching-service/.env
    volumes:
      - redis-data-matching-service:/data

# Named volumes for data persistence
volumes:
  mongodb-data-user-services:
  redis-data-collab-service:
  redis-data-matching-service:
  pg-data-question-service:
