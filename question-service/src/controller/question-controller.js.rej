diff a/question-service/src/controller/question-controller.js b/question-service/src/controller/question-controller.js	(rejected hunks)
@@ -1,28 +1,44 @@
 import { getAllQuestionsFromDb } from '../models/question.js';
 
 /*
-  Controller to handle GET /question/
-  Handles optional query parameters:
+  Controller to handle POST /question/
+  Handles request body parameters:
     - topic: filter questions by topic
     - difficulty: filter questions by difficulty level (easy, medium, hard)
+  Handles optional query parameters:
     - limit: limit the number of questions returned
     - random: if true, returns questions in random order
 */
 export async function getAllQuestions(req, res) {
   try {
-    let { topic, difficulty, limit, random } = req.query;
+    let { topic, difficulty } = req.body;
+    let { limit, random } = req.query;
+
+    // Convert to arrays if not already in array form
+    if (topic && !Array.isArray(topic)) {
+      topic = [topic];
+    }
+    if (difficulty && !Array.isArray(difficulty)) {
+      difficulty = [difficulty];
+    }
 
     // Replace underscores with spaces 
     if (topic) {
-      topic = topic.replace(/_/g, ' ');
+      topic = topic.map(t => t.replace(/_/g, ' ').toLowerCase());
     }
 
 
-    // Validate difficulty
+    // Validate difficulties
     const validDifficulties = ['easy', 'medium', 'hard'];
-    if (difficulty && !validDifficulties.includes(difficulty.toLowerCase())) {
-      return res.status(400).json({ message: 'Invalid difficulty value' });
+    if (difficulty) {
+      difficulty = difficulty.map(d => d.toLowerCase()); // ðŸ‘ˆ changed
+      if (!difficulty.every(d => validDifficulties.includes(d))) {
+        return res.status(400).json({ message: 'Invalid difficulty value(s)' });
+      }
     }
+    // if (difficulty && !difficulty.every(d => validDifficulties.includes(d.toLowerCase()))) {
+    //   return res.status(400).json({ message: 'Invalid difficulty value(s)' });
+    // }
 
     // Parse and validate limit
     const parsedLimit = limit ? parseInt(limit, 10) : null;
