# AI Assistance Disclosure:
# Tool: GitHub Copilot (model: Claude Sonnet 4), date: 2025-09-24
# Purpose: To update Nginx configuration with verification routes for email verification functionality.
# Author Review: I validated correctness, security, and performance of the configuration.

# AI Assistance Disclosure:
# Tool: GitHub Copilot (model: Claude Sonnet 4), date: 2025-09-16
# Purpose: To configure Nginx reverse proxy for PeerPrep frontend and user service with proper routing, CORS handling, and Next.js client-side navigation support.
# Author Review: I validated correctness, security, and performance of the configuration.

server {
    listen       ${PORT};
    listen  [::]:${PORT};
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

    # Default location - API Gateway only serves API routes
    location / {
        return 404 '{"error": "Not Found", "message": "This is an API Gateway. Frontend is served separately."}';
        add_header Content-Type application/json;
    }

    # User Service API
    location /api/users/ {
        proxy_pass ${USER_SERVICE_URL}/users/;
        proxy_set_header Host $proxy_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS - Always replace headers, don't append
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Credentials;

        add_header Access-Control-Allow-Origin '${FRONTEND_BASE_URL}' always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, Cookie" always;
        add_header Access-Control-Allow-Credentials 'true' always;
        
        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }

    # Auth Service API  
    location /api/auth/ {
        proxy_pass ${USER_SERVICE_URL}/auth/;
        proxy_set_header Host $proxy_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS - Always replace headers, don't append
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Credentials;

        add_header Access-Control-Allow-Origin '${FRONTEND_BASE_URL}' always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, Cookie" always;
        add_header Access-Control-Allow-Credentials 'true' always;
        
        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }

    # Verification Service API
    location /api/verification/ {
        proxy_pass ${USER_SERVICE_URL}/verification/;
        proxy_set_header Host $proxy_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS - Always replace headers, don't append
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Credentials;

        add_header Access-Control-Allow-Origin '${FRONTEND_BASE_URL}' always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, Cookie" always;
        add_header Access-Control-Allow-Credentials 'true' always;
        
        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }

    # location /api/collab {
    #     proxy_pass ${COLLAB_SERVICE_URL}/api/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;

    #     # CORS - Always replace headers, don't append
    #     proxy_hide_header Access-Control-Allow-Origin;
    #     proxy_hide_header Access-Control-Allow-Methods;
    #     proxy_hide_header Access-Control-Allow-Headers;
    #     proxy_hide_header Access-Control-Allow-Credentials;
    #     add_header Access-Control-Allow-Origin '${FRONTEND_BASE_URL}' always;
    #     add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    #     add_header Access-Control-Allow-Headers "Content-Type, Authorization, Cookie" always;
    #     add_header Access-Control-Allow-Credentials 'true' always;

    #     if ($request_method = 'OPTIONS') {
    #         return 204;
    #     }
    # }

    # location /collab-socket {
    #     proxy_pass ${COLLAB_SERVICE_URL}/;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "Upgrade";
    # }

    location /api/matching/ {
        proxy_pass ${MATCHING_SERVICE_URL}/matching/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS - Always replace headers, don't append
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Credentials;
        add_header Access-Control-Allow-Origin '${FRONTEND_BASE_URL}' always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, Cookie" always;
        add_header Access-Control-Allow-Credentials 'true' always;

        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status": "healthy", "timestamp": "$time_iso8601"}';
        add_header Content-Type application/json;
    }

    # Debug endpoint to check environment variables
    location /debug/config {
        access_log off;
        return 200 '{"USER_SERVICE_URL": "${USER_SERVICE_URL}", "FRONTEND_BASE_URL": "${FRONTEND_BASE_URL}", "PORT": "${PORT}"}';
        add_header Content-Type application/json;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

